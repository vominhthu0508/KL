/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BLL.KhoaLuanBLL;
import DTO.KhoaLuanDTO;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DLT
 */
public class KhoaLuanForm extends javax.swing.JFrame {
    KhoaLuanBLL bll = new KhoaLuanBLL();
    ArrayList<KhoaLuanDTO> dataList = new ArrayList<KhoaLuanDTO>();
    
    public KhoaLuanForm() throws Exception {
        initComponents();
//        dataList.add(new KhoaLuanDTO(1, 25, (float)0.29, 0));
//        dataList.add(new KhoaLuanDTO(2, 18, (float)0.3, 0));
//        dataList.add(new KhoaLuanDTO(35, 17, (float)0.7, 0));
//        dataList.add(new KhoaLuanDTO(6, 11, (float)0.2, 0));
        
        dataList = bll.getAllData();
        //bll.DeleteExclusiveTable();
        //bll.DeleteInclusiveTable();
        //Collections.sort(dataList, new SortByRoll());
        //dataList = GetRankedSequence(dataList, -1);
        ShowTable(dataList);
    }
    
    public void ShowTable (ArrayList<KhoaLuanDTO> dataList) throws Exception{
        Vector columns = new Vector();
        columns.add("Tuple");
        columns.add("Product Id");
        columns.add("Score");
        columns.add("Probability");
        columns.add("Top-k probability");
        
        Vector vector = new Vector();
        for(KhoaLuanDTO data : dataList)
        {
            Vector row = new Vector();            
            row.add(data.getIndex());
            row.add(data.getId());
            row.add(data.getScore());
            row.add(data.getPro());
            vector.add(row);
        }
        DefaultTableModel data1 = new DefaultTableModel(vector, columns);
        jTable1.setModel(data1);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRun = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tìm xác suất top-k tốt nhất");

        btnRun.setText("Run");
        btnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRunMouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnRun, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(btnRun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRunMouseClicked
        ArrayList<KhoaLuanDTO> sequenceWithInclusiveRule = new ArrayList<KhoaLuanDTO>();
        int i = 6;
        int k = 4;
        float result = 0;
        try {
            //SetExclusiveRuleTable(dataList, i);
            //sequenceWithExclusiveRule = GetSequenceWithExclusiveRule(dataList, i);
            //result = GetTopkPro(sequenceWithExclusiveRule, 2, i);
            
            //SetInclusiveRuleTable(dataList, i);
            result = GetProTopkWithInclusiveRule(dataList, k, i);
            
            //result = GetTopkPro(dataList, 4, 6);
        } catch (Exception ex) {
            Logger.getLogger(KhoaLuanForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        jTextField1.setText(String.valueOf(result));
    }//GEN-LAST:event_btnRunMouseClicked

    //Theorem 1
    private float GetProkTuple(ArrayList<KhoaLuanDTO> Sequence, int i, int j) //pro of k tuples appearing in the sequence, i index of tuple
    {
        float prokTuple = 1; //pro of k tuple in the sequence   
        if (i + 1 == 0 && j == 0)
        {
            return 1;
        }
        if (i + 1 == 0)
        {
            return 0;
        }
        float pro = Sequence.get(i).getPro();
        if (i + 1 == 1 && j == 1)
        {
            return pro;
        }       
        if (i + 1 > 0 && j == 0)
        {
            float prok = 0.0f; //pro of k not appearing in the Sequence
            for (int k = 0; k <= i; k++) //k=0 same j=1
            {
                prok = (1 - Sequence.get(k).getPro()); 
                prokTuple *= prok;
            }
             return prokTuple;
        }
        prokTuple = GetProkTuple(Sequence, i - 1, j - 1) * pro + GetProkTuple(Sequence, i - 1, j) * (1 - pro);
        return prokTuple;
    }
    
    //Theorem 3
    private float GetTopkPro (ArrayList<KhoaLuanDTO> Sequence, int k, int i) //Get top-k pro of ti 
    {
        float proTopk = 0;
        KhoaLuanDTO tuple = new KhoaLuanDTO();
        tuple = GetTupleByIndex(Sequence, i);
        int currentIndex = Sequence.indexOf(tuple);
        float pro = tuple.getPro(); //pro of tuple
        for(int j = 1; j <= k; j++)
        {
            proTopk += GetProkTuple(Sequence, currentIndex - 1, j - 1);
        }
        return pro * proTopk;
    }
      
    private void SetExclusiveRuleTable(ArrayList<KhoaLuanDTO> Sequence, int i) throws Exception
    {
        for (int t = 0; t < Sequence.size() - 1; t++)
        {
            float sumPro = 0;
            ArrayList<KhoaLuanDTO> LeftSequence = new ArrayList<KhoaLuanDTO>();
            for (int t2 = t + 1; t2 < Sequence.size(); t2++)
            {
                if (Sequence.get(t).getId().equalsIgnoreCase(Sequence.get(t2).getId()))
                {
                    if (Sequence.get(t).getIndex() <= i && Sequence.get(t2).getIndex() <= i)
                    {
                        sumPro += Sequence.get(t).getPro() + Sequence.get(t2).getPro();
                        if (sumPro <= 1)
                        {
                            LeftSequence.add(Sequence.get(t2));
                        }
                    }
                }
            }
            if (LeftSequence.size() > 0)
            {
                bll.InsertExclusiveTable(Sequence.get(t).getIndex(), GetExclusiveTupleString(LeftSequence));
            }
        }
    }
    
    private ArrayList<KhoaLuanDTO> GetSequenceWithExclusiveRule(ArrayList<KhoaLuanDTO> Sequence, int i) throws Exception
    {
        String exclusiveTupleString = "";
        ArrayList<KhoaLuanDTO> sequenceWithExclusiveRule = new ArrayList<KhoaLuanDTO>();
        for (int t = 0; t < i; t++)
        {
            if (Sequence.get(t).getIndex() == -1)
            {
                continue;
            }
            exclusiveTupleString = bll.GetExclusiveTupleString(t + 1);
            if(exclusiveTupleString == "")
            {
                sequenceWithExclusiveRule.add(Sequence.get(t));
                continue;
            }
            else
            {
                if (!exclusiveTupleString.contains(",")) // only one tuple
                {
                    if (t + 1 == Integer.valueOf(exclusiveTupleString))
                    {
                        continue;
                    }
                    
                    if (i != Integer.valueOf(exclusiveTupleString) && i != t + 1) //ti not in RhLeft
                    {
                        float sumPro = Sequence.get(t).getPro() 
                                        + Sequence.get(Integer.valueOf(exclusiveTupleString) - 1).getPro();
                        KhoaLuanDTO newTuple = new KhoaLuanDTO();
                        newTuple.setIndex(Integer.valueOf(String.valueOf(Sequence.get(t).getIndex()) 
                                                            + String.valueOf(exclusiveTupleString)));
                        newTuple.setPro(sumPro);
                        sequenceWithExclusiveRule.add(newTuple);
                        Sequence.get(Integer.valueOf(exclusiveTupleString) - 1).setIndex(-1);
                    }
                    else  //ti in RhLeft
                    {
                        Sequence.get(t).setIndex(-1);
                    }
                }
            }
        }
        return sequenceWithExclusiveRule;
    }
    
    private String GetExclusiveTupleString(ArrayList<KhoaLuanDTO> tuples)
    {
        String exclusiveTupleString = "";
        if (tuples.size() == 1)
        {
            exclusiveTupleString += tuples.get(tuples.size() - 1).getIndex();
        }
        else
        {
            for(int t = 0; t < tuples.size(); t++)
            {
                if (t < tuples.size() - 1)
                {
                    exclusiveTupleString += tuples.get(t).getIndex() + ",";
                }
                else
                {
                    exclusiveTupleString += String.valueOf(tuples.get(t).getIndex());
                }
            }
        }        
        return exclusiveTupleString;
    }
    
    private void SetInclusiveRuleTable(ArrayList<KhoaLuanDTO> Sequence, int i) throws Exception
    {
        for (int t = 0; t < Sequence.size() - 1; t++)
        {
            ArrayList<KhoaLuanDTO> inclusiveSequence = new ArrayList<KhoaLuanDTO>();
            for (int t2 = t + 1; t2 < Sequence.size(); t2++)
            {
                if (Sequence.get(t).getPro() == Sequence.get(t2).getPro())
                {
                    if (Sequence.get(t).getIndex() <= i || Sequence.get(t2).getIndex() <= i)
                    {
                        inclusiveSequence.add(Sequence.get(t2));
                    }
                }
            }
            if (inclusiveSequence.size() > 0)
            {
                bll.InsertInclusiveTable(Sequence.get(t).getIndex(), GetInclusiveTupleString(inclusiveSequence));
            }
        }
    }
    
    private String GetInclusiveTupleString(ArrayList<KhoaLuanDTO> tuples)
    {
        String inclusiveTupleString = "";
        if (tuples.size() == 1)
        {
            inclusiveTupleString += tuples.get(tuples.size() - 1).getIndex();
        }
        else
        {
            for(int t = 0; t < tuples.size(); t++)
            {
                if (t < tuples.size() - 1)
                {
                    inclusiveTupleString += tuples.get(t).getIndex() + ",";
                }
                else
                {
                    inclusiveTupleString += String.valueOf(tuples.get(t).getIndex());
                }
            }
        }        
        return inclusiveTupleString;
    }
    
    private float GetProTopkWithInclusiveRule(ArrayList<KhoaLuanDTO> Sequence, int k, int i) throws Exception
    {
        float proTopk = 0;
        ArrayList<KhoaLuanDTO> sequenceWithInclusiveRule = new ArrayList<KhoaLuanDTO>();
        KhoaLuanDTO tuple = new KhoaLuanDTO();
        tuple = GetTupleByIndex(Sequence, i);
        float pro = tuple.getPro(); //pro of tuple
        String inclusiveTupleString = "";        
        int z = 0;
        for (int t = 0; t < i - 1; t++)
        {
            if (Sequence.get(t).getIndex() == -1)
            {
                continue;
            }
            inclusiveTupleString = bll.GetInclusiveTupleString(t + 1);
            if(inclusiveTupleString == "")
            {
                sequenceWithInclusiveRule.add(Sequence.get(t));
                continue;
            }
            else
            {
                if (!inclusiveTupleString.contains(",")) // only one tuple
                {
                    if (i != Integer.valueOf(inclusiveTupleString) && i != t + 1)  //ti not in RhLeft
                    {
                        sequenceWithInclusiveRule.add(Sequence.get(t));                        
                        z = sequenceWithInclusiveRule.size();
                        int currentIndex = sequenceWithInclusiveRule.size() - 1;
                        for(int j = 1; j <= z; j++)
                        {
                            proTopk += GetProkTuple(Sequence, currentIndex - 1, j - 1);
                        }
                    }
                    else  //ti in RhLeft
                    {
                        if (t + 1 < i)
                        {
                            z = 1; // There is 1 tuple ranked higher than ti
                            continue;
                        }
                        sequenceWithInclusiveRule.add(Sequence.get(t));
                        Sequence.get(t).setIndex(t);
                    }
                }
            }
        }
        
        // for rule R2
        int currentIndex = sequenceWithInclusiveRule.size() - 1;
        for(int j = 1; j <= (k - z); j++)
        {
            proTopk += GetProkTuple(sequenceWithInclusiveRule, currentIndex - 1, j - 1);
        }
        return pro * proTopk;
    }
    
    private KhoaLuanDTO GetTupleByIndex (ArrayList<KhoaLuanDTO> sequence, int indexOfTuple)
    {
        KhoaLuanDTO tuple = new KhoaLuanDTO();
        for (int t = 0; t < sequence.size(); t++)
        {
            if (sequence.get(t).getIndex() == indexOfTuple)
            {
                 tuple = sequence.get(t);
                 break;
            }
        }
        return tuple;
    }
    
    private ArrayList GetRankedSequence(ArrayList<KhoaLuanDTO> dataList, int i) throws Exception
    {
        ArrayList<KhoaLuanDTO> rankedSequence = new ArrayList<KhoaLuanDTO>();
        if (i == -1) 
        {
            i = dataList.size();
        }
        for (int t = 1; t <= i; t++)
        {
            KhoaLuanDTO tuple = new KhoaLuanDTO();
            tuple = dataList.get(t - 1);
            tuple.setIndex(t); 
            bll.UpdateIndexOfTuple(t);
            rankedSequence.add(tuple);
        }
        return rankedSequence;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KhoaLuanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KhoaLuanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KhoaLuanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhoaLuanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new KhoaLuanForm().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(KhoaLuanForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRun;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
